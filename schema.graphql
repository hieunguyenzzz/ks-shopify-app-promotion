# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Store {
  id: ID!
  name: String
}

input StoreWhereUniqueInput {
  id: ID
  name: String
}

input StoreWhereInput {
  AND: [StoreWhereInput!]
  OR: [StoreWhereInput!]
  NOT: [StoreWhereInput!]
  id: IDFilter
  name: StringFilter
}

input StoreOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input StoreUpdateInput {
  name: String
}

input StoreUpdateArgs {
  where: StoreWhereUniqueInput!
  data: StoreUpdateInput!
}

input StoreCreateInput {
  name: String
}

type Campaign {
  id: ID!
  title: String
  status: Int
  active_from_date: DateTime
  active_to_date: DateTime
  priority: Int
  store: Store
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input CampaignWhereUniqueInput {
  id: ID
}

input CampaignWhereInput {
  AND: [CampaignWhereInput!]
  OR: [CampaignWhereInput!]
  NOT: [CampaignWhereInput!]
  id: IDFilter
  title: StringFilter
  status: IntNullableFilter
  active_from_date: DateTimeNullableFilter
  active_to_date: DateTimeNullableFilter
  priority: IntNullableFilter
  store: StoreWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input CampaignOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  active_from_date: OrderDirection
  active_to_date: OrderDirection
  priority: OrderDirection
}

input CampaignUpdateInput {
  title: String
  status: Int
  active_from_date: DateTime
  active_to_date: DateTime
  priority: Int
  store: StoreRelateToOneForUpdateInput
}

input StoreRelateToOneForUpdateInput {
  create: StoreCreateInput
  connect: StoreWhereUniqueInput
  disconnect: Boolean
}

input CampaignUpdateArgs {
  where: CampaignWhereUniqueInput!
  data: CampaignUpdateInput!
}

input CampaignCreateInput {
  title: String
  status: Int
  active_from_date: DateTime
  active_to_date: DateTime
  priority: Int
  store: StoreRelateToOneForCreateInput
}

input StoreRelateToOneForCreateInput {
  create: StoreCreateInput
  connect: StoreWhereUniqueInput
}

type CampaignItem {
  id: ID!
  product: Product
  campaign: Campaign
  price: Decimal
}

scalar Decimal

input CampaignItemWhereUniqueInput {
  id: ID
}

input CampaignItemWhereInput {
  AND: [CampaignItemWhereInput!]
  OR: [CampaignItemWhereInput!]
  NOT: [CampaignItemWhereInput!]
  id: IDFilter
  product: ProductWhereInput
  campaign: CampaignWhereInput
  price: DecimalNullableFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input CampaignItemOrderByInput {
  id: OrderDirection
  price: OrderDirection
}

input CampaignItemUpdateInput {
  product: ProductRelateToOneForUpdateInput
  campaign: CampaignRelateToOneForUpdateInput
  price: Decimal
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input CampaignRelateToOneForUpdateInput {
  create: CampaignCreateInput
  connect: CampaignWhereUniqueInput
  disconnect: Boolean
}

input CampaignItemUpdateArgs {
  where: CampaignItemWhereUniqueInput!
  data: CampaignItemUpdateInput!
}

input CampaignItemCreateInput {
  product: ProductRelateToOneForCreateInput
  campaign: CampaignRelateToOneForCreateInput
  price: Decimal
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input CampaignRelateToOneForCreateInput {
  create: CampaignCreateInput
  connect: CampaignWhereUniqueInput
}

type Product {
  id: ID!
  name: String
  sku: String
  compareAtPrice: Decimal
  shopifyId: String
  store: Store
}

input ProductWhereUniqueInput {
  id: ID
  shopifyId: String
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  sku: StringFilter
  compareAtPrice: DecimalNullableFilter
  shopifyId: StringFilter
  store: StoreWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  sku: OrderDirection
  compareAtPrice: OrderDirection
  shopifyId: OrderDirection
}

input ProductUpdateInput {
  name: String
  sku: String
  compareAtPrice: Decimal
  shopifyId: String
  store: StoreRelateToOneForUpdateInput
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  sku: String
  compareAtPrice: Decimal
  shopifyId: String
  store: StoreRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createStore(data: StoreCreateInput!): Store
  createStores(data: [StoreCreateInput!]!): [Store]
  updateStore(where: StoreWhereUniqueInput!, data: StoreUpdateInput!): Store
  updateStores(data: [StoreUpdateArgs!]!): [Store]
  deleteStore(where: StoreWhereUniqueInput!): Store
  deleteStores(where: [StoreWhereUniqueInput!]!): [Store]
  createCampaign(data: CampaignCreateInput!): Campaign
  createCampaigns(data: [CampaignCreateInput!]!): [Campaign]
  updateCampaign(
    where: CampaignWhereUniqueInput!
    data: CampaignUpdateInput!
  ): Campaign
  updateCampaigns(data: [CampaignUpdateArgs!]!): [Campaign]
  deleteCampaign(where: CampaignWhereUniqueInput!): Campaign
  deleteCampaigns(where: [CampaignWhereUniqueInput!]!): [Campaign]
  createCampaignItem(data: CampaignItemCreateInput!): CampaignItem
  createCampaignItems(data: [CampaignItemCreateInput!]!): [CampaignItem]
  updateCampaignItem(
    where: CampaignItemWhereUniqueInput!
    data: CampaignItemUpdateInput!
  ): CampaignItem
  updateCampaignItems(data: [CampaignItemUpdateArgs!]!): [CampaignItem]
  deleteCampaignItem(where: CampaignItemWhereUniqueInput!): CampaignItem
  deleteCampaignItems(where: [CampaignItemWhereUniqueInput!]!): [CampaignItem]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  stores(
    where: StoreWhereInput! = {}
    orderBy: [StoreOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Store!]
  store(where: StoreWhereUniqueInput!): Store
  storesCount(where: StoreWhereInput! = {}): Int
  campaigns(
    where: CampaignWhereInput! = {}
    orderBy: [CampaignOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Campaign!]
  campaign(where: CampaignWhereUniqueInput!): Campaign
  campaignsCount(where: CampaignWhereInput! = {}): Int
  campaignItems(
    where: CampaignItemWhereInput! = {}
    orderBy: [CampaignItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CampaignItem!]
  campaignItem(where: CampaignItemWhereUniqueInput!): CampaignItem
  campaignItemsCount(where: CampaignItemWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
